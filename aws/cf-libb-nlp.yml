AWSTemplateFormatVersion: "2010-09-09"
Description: "ECS Fargate Cluster with ALB and CloudWatch Logs â€“ Template for ${ApplicationName}"

Parameters:
  ApplicationName:
    Description: Base name for all resources (e.g. myapp will create myapp-cl, myapp-al, etc.)
    Type: String
  VpcId:
    Description: VPC ID for deploying resources
    Type: AWS::EC2::VPC::Id
  PrivateSubnet1Id:
    Description: First private subnet ID for Fargate tasks
    Type: AWS::EC2::Subnet::Id
  PrivateSubnet2Id:
    Description: Second private subnet ID for Fargate tasks (for HA)
    Type: AWS::EC2::Subnet::Id
  EcrRepository:
    Description: Repository name containing the ECR Docker Image (e.g., libb-nlp)
    Type: String
  ImageTag:
    Description: Docker image tag to deploy (e.g., latest)
    Type: String
    Default: latest
  Region:
    Description: AWS Region (for log configuration)
    Type: String
    Default: us-east-1
  TaskExecutionRole:
    Description: ARN of the task execution role for Fargate
    Type: String
  TaskRole:
    Description: ARN of the task role for Fargate
    Type: String

Resources:
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: !Sub "${ApplicationName}-cl"
      Tags:
      - Key: Fund
        Value: True

  FargateTaskSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-sg-task"
      GroupDescription: !Sub "Security group for Fargate tasks of ${ApplicationName}"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow ALB to connect to ECS instances on port 8000
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      SecurityGroupEgress:
        # Allow outbound to anywhere (for internet access via NAT)
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Fund
        Value: True

  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub "${ApplicationName}-sg-alb"
      GroupDescription: !Sub "Security group for ALB of ${ApplicationName}"
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow inbound from anywhere on port 80 (public access)
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        # Allow all outbound (ALB can reach ECS targets)
        - IpProtocol: -1
          FromPort: 0
          ToPort: 0
          CidrIp: 0.0.0.0/0
      Tags:
      - Key: Fund
        Value: True

  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub "${ApplicationName}-al"
      Scheme: internal # internet-facing for public
      Subnets:
        - !Ref PrivateSubnet1Id # can be public if desired
        - !Ref PrivateSubnet2Id # can be public if desired
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Type: application
      IpAddressType: ipv4
      Tags:
      - Key: Fund
        Value: True

  ApplicationTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: !Sub "${ApplicationName}-tg"
      VpcId: !Ref VpcId
      Protocol: HTTP
      Port: 8000
      TargetType: ip
      HealthCheckPath: "/health"
      HealthCheckIntervalSeconds: 60
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      UnhealthyThresholdCount: 2

  ApplicationListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ApplicationLoadBalancer
      - ApplicationTargetGroup
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ApplicationTargetGroup

  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/ecs/${ApplicationName}"
      RetentionInDays: 30
      Tags:
      - Key: Fund
        Value: True

  ECSTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref ApplicationName
      NetworkMode: awsvpc
      RequiresCompatibilities: [ FARGATE ]
      Cpu: "4096"    # 4 vCPU
      Memory: "8192" # 8GB
      ExecutionRoleArn: !Ref TaskExecutionRole
      TaskRoleArn: !Ref TaskRole
      ContainerDefinitions:
        - Name: !Ref ApplicationName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrRepository}:${ImageTag}"
          Essential: true
          PortMappings:
            - ContainerPort: 8000
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ECSLogGroup      # reference by name/ARN works because created above
              awslogs-region: !Ref Region
              awslogs-stream-prefix: "ecs"

  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ApplicationListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: !Sub "${ApplicationName}-svc"
      TaskDefinition: !Ref ECSTaskDefinition
      DesiredCount: 1
      LaunchType: FARGATE
      DeploymentConfiguration:
        MinimumHealthyPercent: 0    # allow going down to 0 tasks during deploy
        MaximumPercent: 100         # do not launch extra tasks above desired count
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref FargateTaskSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1Id
            - !Ref PrivateSubnet2Id
      LoadBalancers:
        - ContainerName: !Ref ApplicationName
          ContainerPort: 8000
          TargetGroupArn: !Ref ApplicationTargetGroup
      Tags:
      - Key: Fund
        Value: True

Outputs:
  LoadBalancerDNSName:
    Description: DNS name of the Application Load Balancer
    Value: !GetAtt ApplicationLoadBalancer.DNSName
